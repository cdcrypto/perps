
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 25
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/sierra-research/Zeta%20DEX/implementation/web)
 */

import * as amplitude from '@amplitude/analytics-browser';

export type Environment = 'production' | 'development';

export const ApiKey: Record<Environment, string> = {
  production: 'e135828de624468cf5c1300914ac5a4a',
  development: '5d2de3b3c38b2807ffa9dc5824c09b83'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: '25',
    branch: 'main',
    source: 'web',
    versionId: 'e430d7ea-5f54-4d4c-a482-674945c55cfa'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'browser-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: BrowserOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface IdentifyProperties {
  /**
   * This represents the user's usdc balance the first time they connect on Zeta
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  first_wallet_connect_usdc_balance?: number;
  /**
   * A boolean field indicating whether or not the user has a solana wallet installed at the time an event fires
   */
  has_solana_wallet_installed: boolean;
  initial_dclid?: any;
  initial_fbclid?: any;
  initial_gbraid?: any;
  initial_gclid?: any;
  initial_ko_click_id?: any;
  initial_msclkid?: any;
  initial_referrer?: any;
  initial_referring_domain?: any;
  initial_ttclid?: any;
  initial_twclid?: any;
  initial_utm_campaign?: any;
  initial_utm_content?: any;
  initial_utm_id?: any;
  initial_utm_medium?: any;
  initial_utm_source?: any;
  initial_utm_term?: any;
  initial_wbraid?: any;
  /**
   * An array of wallet providers that the user has installed on their browser
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  installed_solana_wallets?: string[];
  referrer?: any;
  referring_domain?: any;
}

export interface ActivateReferrerStatusProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
}

export interface CancelAllOrdersProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The number of orders cancelled when the user clicks "Cance All"
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 1 |
   */
  num_orders_cancelled: number;
  /**
   * An array of order ids
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  order_ids: string[];
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface CancelOrderProperties {
  /**
   * The amount of the transaction, denominated in USD
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amount_usd: number;
  /**
   * The expiration timestamp of the dated future or option
   */
  expiry?: string;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The unique identifier for each order place by users
   */
  order_id?: string;
  /**
   * The price of at asset when a user enters a position
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  price: number;
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
  side: string;
  /**
   * The amount of the transaction, denominated in the underlying
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  size: number;
  /**
   * The strike price of a given product type / market
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  strike: number;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface ClaimRewardsProperties {
  /**
   * The amount of the transaction, denominated in the native token
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amount: number;
  /**
   * The amount of the transaction, denominated in USD
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amount_usd: number;
  /**
   * Indicates whether the user chose to deposit their rewards back into their margin account or not
   */
  is_deposited_to_margin_account: boolean;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * Kind of rewards the user is claiming
   */
  kind: string;
  /**
   * The token which the user is using to perform a specific action like deposit, withdraw, transfer, or claim rewards
   */
  token: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface ClickCtaProperties {
  cta_text: string;
  /**
   * The destination which the user is taken to upon clicking the link
   */
  destination: string;
  /**
   * The location on the site where the user clicks "Deposit", "Withdraw", or "Transfer"
   */
  location: string;
}

export interface ConfirmReferralProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The referral code of the user who referred them to Zeta
   */
  referral_code: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface ConnectWalletProperties {
  /**
   * The amount of SOL a user has in their wallet at the time they connect
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  sol_balance: number;
  /**
   * The amount of USDC a user has in their wallet at the time they connect
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  usdc_balance: number;
  wallet_address: string;
  wallet_provider: string;
}

export interface FavoriteMarketProperties {
  /**
   * The expiration timestamp of the dated future or option
   */
  expiry?: string;
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
  /**
   * The strike price of a given product type / market
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  strike?: number;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface ModifyOrderProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The modified price of the underlying in a trade in a modified order
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  modified_price: number;
  /**
   * The modified size of the underlying in a trade in a modified order
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  modified_size: number;
  /**
   * The unique identifier for each order place by users
   */
  order_id?: string;
  /**
   * The original price of the underlying in a trade in a modified order
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  original_price: number;
  /**
   * The original size of the underlying in a trade in a modified order
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  original_size: number;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface ModifyReferrerIdProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The value of the newly modified referrer id
   */
  modified_value: string;
  /**
   * The original value for the referrer id
   */
  original_value: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface OpenDepositModalProperties {
  /**
   * The location on the site where the user clicks "Deposit", "Withdraw", or "Transfer"
   */
  location: string;
}

export interface OpenTransferModalProperties {
  /**
   * The location on the site where the user clicks "Deposit", "Withdraw", or "Transfer"
   */
  location: string;
}

export interface OpenWithdrawModalProperties {
  /**
   * The location on the site where the user clicks "Deposit", "Withdraw", or "Transfer"
   */
  location: string;
}

export interface PlaceOrderProperties {
  /**
   * The amount of the transaction, denominated in USD
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  amount_usd: number;
  /**
   * The expiration timestamp of the dated future or option
   */
  expiry?: string;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The amount of leverage a user applies in a given order
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  leverage: number;
  /**
   * The unique identifier for each order place by users
   */
  order_id?: string;
  /**
   * The trait of the order, which describes how the order is posted and filled on the orderbook
   */
  order_trait?: string;
  /**
   * Indicates whether the order is a limit order or market order
   */
  order_type: string;
  /**
   * The price of at asset when a user enters a position
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  price: number;
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
  side: string;
  /**
   * The amount of the transaction, denominated in the underlying
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  size: number;
  /**
   * The strike price of a given product type / market
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  strike?: number;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface SelectContactProperties {
  /**
   * The destination which the user is taken to upon clicking the link
   */
  destination: string;
}

export interface SelectCurrentPositionsProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface SelectFeedbackProperties {
  /**
   * The destination which the user is taken to upon clicking the link
   */
  destination: string;
}

export interface SelectFundingHistoryProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface SelectGuideProperties {
  /**
   * The destination which the user is taken to upon clicking the link
   */
  destination: string;
}

export interface SelectLeaderboardTimeframeProperties {
  /**
   * The specific lookback period on which a user's performance is evaluated for the leaderboard e.g. 24h, 7d, 30d, etc.
   */
  leaderboard_timeframe: string;
}

export interface SelectLearnProperties {
  /**
   * The destination which the user is taken to upon clicking the link
   */
  destination: string;
}

export interface SelectMarketProperties {
  /**
   * The expiration timestamp of the dated future or option
   */
  expiry?: string;
  /**
   * Indicates that the selected market is marked as one of the user's favorites
   */
  is_favorite: boolean;
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
  /**
   * The strike price of a given product type / market
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  strike?: number;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface SelectOpenOrdersProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface SelectPriceGroupingProperties {
  /**
   * The price grouping of the prices shown on the orderbook
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  price_grouping: number;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface SelectProductProperties {
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
}

export interface SelectTradeHistoryProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface SubmitDepositProperties {
  /**
   * The amount of the transaction, denominated in the native token
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  amount: number;
  /**
   * The percentage of a user's wallet amount that is deposited during a given *submit deposit* event for that specific token
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Max Value | 1 |
   */
  deposit_capture_rate: number;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The margin account to which a transaction is submitted
   */
  margin_account: string;
  /**
   * The token which the user is using to perform a specific action like deposit, withdraw, transfer, or claim rewards
   */
  token: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
  /**
   * The amount of the token which the user has in their wallet
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  wallet_amount: number;
}

export interface SubmitMarginAccountTransferProperties {
  /**
   * The amount of the transaction, denominated in the native token
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amount: number;
  /**
   * The margin account which the user is transferring collateral to
   */
  destination_margin_account: string;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The margin account which the user is transferring collateral from
   */
  source_margin_account: string;
  /**
   * The token which the user is using to perform a specific action like deposit, withdraw, transfer, or claim rewards
   */
  token: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface SubmitWithdrawalProperties {
  /**
   * The amount of the transaction, denominated in the native token
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amount: number;
  /**
   * Boolean field indicating whether or not the withdrawal is just a withdrawal or a withdrawal *and* an account closure
   */
  is_account_closure: boolean;
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The margin account to which a transaction is submitted
   */
  margin_account: string;
  /**
   * The balance of the margin account at the time the event is fired
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Min Value | 0 |
   */
  margin_account_balance: number;
  /**
   * The token which the user is using to perform a specific action like deposit, withdraw, transfer, or claim rewards
   */
  token: string;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
  /**
   * The percentage of the current margin account balance that is withdrawn in the specific *submit withdrawal* event
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   * | Max Value | 1 |
   */
  withdrawal_loss_rate: number;
}

export interface TransferToMarginAccountProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface TransferToSpreadAccountProperties {
  /**
   * Indicates whether or not the user's transaction was successfully executed on the blockchain
   */
  is_successful: boolean;
  /**
   * The distinct signature of the transaction that was submitted to the blockchain
   */
  tx_signature?: string;
}

export interface UnfavoriteMarketProperties {
  /**
   * The expiration timestamp of the dated future or option
   */
  expiry?: string;
  /**
   * Descriptor which indicates whether the product used in the event is perp, option, or future
   */
  product_type: string;
  /**
   * The strike price of a given product type / market
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  strike?: number;
  /**
   * The underlying asset for a given product type / market
   */
  underlying: string;
}

export interface ViewAccountPageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface ViewLandingPageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface ViewLeaderboardPageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface ViewReferralsPageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface ViewRewardsPageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export interface ViewTradePageProperties {
  /**
   * The url path of the page that is being viewed
   */
  path: string;
}

export class Identify implements BaseEvent {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY;

  constructor(
    public event_properties: IdentifyProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class AcceptConsentPane implements BaseEvent {
  event_type = 'accept consent pane';
}

export class ActivateReferrerStatus implements BaseEvent {
  event_type = 'activate referrer status';

  constructor(
    public event_properties: ActivateReferrerStatusProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class AttemptMarginToSpreadTransfer implements BaseEvent {
  event_type = 'attempt margin to spread transfer';
}

export class CancelAllOrders implements BaseEvent {
  event_type = 'cancel all orders';

  constructor(
    public event_properties: CancelAllOrdersProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CancelOrder implements BaseEvent {
  event_type = 'cancel order';

  constructor(
    public event_properties: CancelOrderProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClaimRewards implements BaseEvent {
  event_type = 'claim rewards';

  constructor(
    public event_properties: ClaimRewardsProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickCta implements BaseEvent {
  event_type = 'click cta';

  constructor(
    public event_properties: ClickCtaProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ConfirmReferral implements BaseEvent {
  event_type = 'confirm referral';

  constructor(
    public event_properties: ConfirmReferralProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ConnectWallet implements BaseEvent {
  event_type = 'connect wallet';

  constructor(
    public event_properties: ConnectWalletProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class FavoriteMarket implements BaseEvent {
  event_type = 'favorite market';

  constructor(
    public event_properties: FavoriteMarketProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class LaunchApp implements BaseEvent {
  event_type = 'launch app';
}

export class LaunchDevnet implements BaseEvent {
  event_type = 'launch devnet';
}

export class LaunchWalletConnectionModal implements BaseEvent {
  event_type = 'launch wallet connection modal';
}

export class ModifyOrder implements BaseEvent {
  event_type = 'modify order';

  constructor(
    public event_properties: ModifyOrderProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ModifyReferrerId implements BaseEvent {
  event_type = 'modify referrer id';

  constructor(
    public event_properties: ModifyReferrerIdProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class OpenDepositModal implements BaseEvent {
  event_type = 'open deposit modal';

  constructor(
    public event_properties: OpenDepositModalProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class OpenHelpDropdown implements BaseEvent {
  event_type = 'open help dropdown';
}

export class OpenMarketSelectionPane implements BaseEvent {
  event_type = 'open market selection pane';
}

export class OpenTradeDropdown implements BaseEvent {
  event_type = 'open trade dropdown';
}

export class OpenTransferModal implements BaseEvent {
  event_type = 'open transfer modal';

  constructor(
    public event_properties: OpenTransferModalProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class OpenWithdrawModal implements BaseEvent {
  event_type = 'open withdraw modal';

  constructor(
    public event_properties: OpenWithdrawModalProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class PlaceOrder implements BaseEvent {
  event_type = 'place order';

  constructor(
    public event_properties: PlaceOrderProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectContact implements BaseEvent {
  event_type = 'select contact';

  constructor(
    public event_properties: SelectContactProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectCurrentPositions implements BaseEvent {
  event_type = 'select current positions';

  constructor(
    public event_properties: SelectCurrentPositionsProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectDoItLater implements BaseEvent {
  event_type = 'select do it later';
}

export class SelectFeedback implements BaseEvent {
  event_type = 'select feedback';

  constructor(
    public event_properties: SelectFeedbackProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectFundingHistory implements BaseEvent {
  event_type = 'select funding history';

  constructor(
    public event_properties: SelectFundingHistoryProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectGuide implements BaseEvent {
  event_type = 'select guide';

  constructor(
    public event_properties: SelectGuideProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectLeaderboardTimeframe implements BaseEvent {
  event_type = 'select leaderboard timeframe';

  constructor(
    public event_properties: SelectLeaderboardTimeframeProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectLearn implements BaseEvent {
  event_type = 'select learn';

  constructor(
    public event_properties: SelectLearnProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectMarket implements BaseEvent {
  event_type = 'select market';

  constructor(
    public event_properties: SelectMarketProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectOpenOrders implements BaseEvent {
  event_type = 'select open orders';

  constructor(
    public event_properties: SelectOpenOrdersProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectOrderbook implements BaseEvent {
  event_type = 'select orderbook';
}

export class SelectPriceGrouping implements BaseEvent {
  event_type = 'select price grouping';

  constructor(
    public event_properties: SelectPriceGroupingProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectProduct implements BaseEvent {
  event_type = 'select product';

  constructor(
    public event_properties: SelectProductProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SelectRecentTrades implements BaseEvent {
  event_type = 'select recent trades';
}

export class SelectTradeHistory implements BaseEvent {
  event_type = 'select trade history';

  constructor(
    public event_properties: SelectTradeHistoryProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ShareReferralLink implements BaseEvent {
  event_type = 'share referral link';
}

export class SubmitDeposit implements BaseEvent {
  event_type = 'submit deposit';

  constructor(
    public event_properties: SubmitDepositProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SubmitMarginAccountTransfer implements BaseEvent {
  event_type = 'submit margin account transfer';

  constructor(
    public event_properties: SubmitMarginAccountTransferProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SubmitWithdrawal implements BaseEvent {
  event_type = 'submit withdrawal';

  constructor(
    public event_properties: SubmitWithdrawalProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class TransferToMarginAccount implements BaseEvent {
  event_type = 'transfer to margin account';

  constructor(
    public event_properties: TransferToMarginAccountProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class TransferToSpreadAccount implements BaseEvent {
  event_type = 'transfer to spread account';

  constructor(
    public event_properties: TransferToSpreadAccountProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class UnfavoriteMarket implements BaseEvent {
  event_type = 'unfavorite market';

  constructor(
    public event_properties: UnfavoriteMarketProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewAccountPage implements BaseEvent {
  event_type = 'view account page';

  constructor(
    public event_properties: ViewAccountPageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewConsentPane implements BaseEvent {
  event_type = 'view consent pane';
}

export class ViewLandingPage implements BaseEvent {
  event_type = 'view landing page';

  constructor(
    public event_properties: ViewLandingPageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewLeaderboardPage implements BaseEvent {
  event_type = 'view leaderboard page';

  constructor(
    public event_properties: ViewLeaderboardPageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewOnboardingIntroPane implements BaseEvent {
  event_type = 'view onboarding intro pane';
}

export class ViewOnboardingPreDepositPane implements BaseEvent {
  event_type = 'view onboarding pre-deposit pane';
}

export class ViewReferralsPage implements BaseEvent {
  event_type = 'view referrals page';

  constructor(
    public event_properties: ViewReferralsPageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewRewardsPage implements BaseEvent {
  event_type = 'view rewards page';

  constructor(
    public event_properties: ViewRewardsPageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ViewTradePage implements BaseEvent {
  event_type = 'view trade page';

  constructor(
    public event_properties: ViewTradePageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties: IdentifyProperties,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * accept consent pane
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/accept%20consent%20pane)
   *
   * User checks terms & conditions and clicks agree and continue
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  acceptConsentPane(
    options?: EventOptions,
  ) {
    return this.track(new AcceptConsentPane(), options);
  }

  /**
   * activate referrer status
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/activate%20referrer%20status)
   *
   * User clicks activate referrer status on the referrals page
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  activateReferrerStatus(
    properties: ActivateReferrerStatusProperties,
    options?: EventOptions,
  ) {
    return this.track(new ActivateReferrerStatus(properties), options);
  }

  /**
   * attempt margin to spread transfer
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/attempt%20margin%20to%20spread%20transfer)
   *
   * User clicks margin to spread button
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  attemptMarginToSpreadTransfer(
    options?: EventOptions,
  ) {
    return this.track(new AttemptMarginToSpreadTransfer(), options);
  }

  /**
   * cancel all orders
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/cancel%20all%20orders)
   *
   * User clicks cancel all button
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  cancelAllOrders(
    properties: CancelAllOrdersProperties,
    options?: EventOptions,
  ) {
    return this.track(new CancelAllOrders(properties), options);
  }

  /**
   * cancel order
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/cancel%20order)
   *
   * User clicks the trash can symbol next to an individual order
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount_usd)
   * @param options Amplitude event options.
   */
  cancelOrder(
    properties: CancelOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new CancelOrder(properties), options);
  }

  /**
   * claim rewards
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/claim%20rewards)
   *
   * User clicks claim rewards on either the rewards or referrals page
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount)
   * @param options Amplitude event options.
   */
  claimRewards(
    properties: ClaimRewardsProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClaimRewards(properties), options);
  }

  /**
   * click cta
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/click%20cta)
   *
   * User clicks a "learn more" CTA link
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. cta_text)
   * @param options Amplitude event options.
   */
  clickCta(
    properties: ClickCtaProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickCta(properties), options);
  }

  /**
   * confirm referral
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/confirm%20referral)
   *
   * User enters the referral code and clicks on the confirm referral button
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  confirmReferral(
    properties: ConfirmReferralProperties,
    options?: EventOptions,
  ) {
    return this.track(new ConfirmReferral(properties), options);
  }

  /**
   * connect wallet
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/connect%20wallet)
   *
   * User connects wallet
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. sol_balance)
   * @param options Amplitude event options.
   */
  connectWallet(
    properties: ConnectWalletProperties,
    options?: EventOptions,
  ) {
    return this.track(new ConnectWallet(properties), options);
  }

  /**
   * favorite market
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/favorite%20market)
   *
   * User clicks the star next to the desired market to favorite
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. expiry)
   * @param options Amplitude event options.
   */
  favoriteMarket(
    properties: FavoriteMarketProperties,
    options?: EventOptions,
  ) {
    return this.track(new FavoriteMarket(properties), options);
  }

  /**
   * launch app
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/launch%20app)
   *
   * User clicks the launch app button on the landing page
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  launchApp(
    options?: EventOptions,
  ) {
    return this.track(new LaunchApp(), options);
  }

  /**
   * launch devnet
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/launch%20devnet)
   *
   * User clicks the launch devnet button on the landing page
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  launchDevnet(
    options?: EventOptions,
  ) {
    return this.track(new LaunchDevnet(), options);
  }

  /**
   * launch wallet connection modal
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/launch%20wallet%20connection%20modal)
   *
   * User clicks the "Connect Wallet" button on the onboarding intro pane
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  launchWalletConnectionModal(
    options?: EventOptions,
  ) {
    return this.track(new LaunchWalletConnectionModal(), options);
  }

  /**
   * modify order
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/modify%20order)
   *
   * User clicks the penicl symbol next to an individual order
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  modifyOrder(
    properties: ModifyOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new ModifyOrder(properties), options);
  }

  /**
   * modify referrer id
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/modify%20referrer%20id)
   *
   * User clicks on the green checkmark after change referral id
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  modifyReferrerId(
    properties: ModifyReferrerIdProperties,
    options?: EventOptions,
  ) {
    return this.track(new ModifyReferrerId(properties), options);
  }

  /**
   * open deposit modal
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20deposit%20modal)
   *
   * User clicks deposit at one of several locations and opens the modal
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. location)
   * @param options Amplitude event options.
   */
  openDepositModal(
    properties: OpenDepositModalProperties,
    options?: EventOptions,
  ) {
    return this.track(new OpenDepositModal(properties), options);
  }

  /**
   * open help dropdown
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20help%20dropdown)
   *
   * User hovers over the help menu in the dex navigation
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  openHelpDropdown(
    options?: EventOptions,
  ) {
    return this.track(new OpenHelpDropdown(), options);
  }

  /**
   * open market selection pane
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20market%20selection%20pane)
   *
   * Users clicks the market button
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  openMarketSelectionPane(
    options?: EventOptions,
  ) {
    return this.track(new OpenMarketSelectionPane(), options);
  }

  /**
   * open trade dropdown
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20trade%20dropdown)
   *
   * User hovers over the trade button in navigation
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  openTradeDropdown(
    options?: EventOptions,
  ) {
    return this.track(new OpenTradeDropdown(), options);
  }

  /**
   * open transfer modal
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20transfer%20modal)
   *
   * User clicks transfer at one of several locations and opens the modal
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. location)
   * @param options Amplitude event options.
   */
  openTransferModal(
    properties: OpenTransferModalProperties,
    options?: EventOptions,
  ) {
    return this.track(new OpenTransferModal(properties), options);
  }

  /**
   * open withdraw modal
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/open%20withdraw%20modal)
   *
   * User clicks withdraw at one of several locations and opens the modal
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. location)
   * @param options Amplitude event options.
   */
  openWithdrawModal(
    properties: OpenWithdrawModalProperties,
    options?: EventOptions,
  ) {
    return this.track(new OpenWithdrawModal(properties), options);
  }

  /**
   * place order
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/place%20order)
   *
   * User selects a side, enters trade details, and clicks the trade button
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount_usd)
   * @param options Amplitude event options.
   */
  placeOrder(
    properties: PlaceOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new PlaceOrder(properties), options);
  }

  /**
   * select contact
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20contact)
   *
   * User clicks the contact button in the help dropdown menu
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. destination)
   * @param options Amplitude event options.
   */
  selectContact(
    properties: SelectContactProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectContact(properties), options);
  }

  /**
   * select current positions
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20current%20positions)
   *
   * User clicks the positions text
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  selectCurrentPositions(
    properties: SelectCurrentPositionsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectCurrentPositions(properties), options);
  }

  /**
   * select do it later
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20do%20it%20later)
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  selectDoItLater(
    options?: EventOptions,
  ) {
    return this.track(new SelectDoItLater(), options);
  }

  /**
   * select feedback
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20feedback)
   *
   * User clicks the feedback button on the navigation menu
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. destination)
   * @param options Amplitude event options.
   */
  selectFeedback(
    properties: SelectFeedbackProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectFeedback(properties), options);
  }

  /**
   * select funding history
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20funding%20history)
   *
   * User clicks the funding history text
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  selectFundingHistory(
    properties: SelectFundingHistoryProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectFundingHistory(properties), options);
  }

  /**
   * select guide
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20guide)
   *
   * User clicks the guide button in the help dropdown menu
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. destination)
   * @param options Amplitude event options.
   */
  selectGuide(
    properties: SelectGuideProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectGuide(properties), options);
  }

  /**
   * select leaderboard timeframe
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20leaderboard%20timeframe)
   *
   * User clicks on the desired leaderboard timeframe (e.g. 24h, 7d, 30d, etc.)
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. leaderboard_timeframe)
   * @param options Amplitude event options.
   */
  selectLeaderboardTimeframe(
    properties: SelectLeaderboardTimeframeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectLeaderboardTimeframe(properties), options);
  }

  /**
   * select learn
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20learn)
   *
   * User clicks the learn button in the help dropdown menu
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. destination)
   * @param options Amplitude event options.
   */
  selectLearn(
    properties: SelectLearnProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectLearn(properties), options);
  }

  /**
   * select market
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20market)
   *
   * User clicks on a specific market in the market selection pane
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. expiry)
   * @param options Amplitude event options.
   */
  selectMarket(
    properties: SelectMarketProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectMarket(properties), options);
  }

  /**
   * select open orders
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20open%20orders)
   *
   * User clicks the open orders text
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  selectOpenOrders(
    properties: SelectOpenOrdersProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectOpenOrders(properties), options);
  }

  /**
   * select orderbook
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20orderbook)
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  selectOrderbook(
    options?: EventOptions,
  ) {
    return this.track(new SelectOrderbook(), options);
  }

  /**
   * select price grouping
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20price%20grouping)
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. price_grouping)
   * @param options Amplitude event options.
   */
  selectPriceGrouping(
    properties: SelectPriceGroupingProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectPriceGrouping(properties), options);
  }

  /**
   * select product
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20product)
   *
   * user clicks the specific product of interest e.g. perpetuals, options, etc.
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. product_type)
   * @param options Amplitude event options.
   */
  selectProduct(
    properties: SelectProductProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectProduct(properties), options);
  }

  /**
   * select recent trades
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20recent%20trades)
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  selectRecentTrades(
    options?: EventOptions,
  ) {
    return this.track(new SelectRecentTrades(), options);
  }

  /**
   * select trade history
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/select%20trade%20history)
   *
   * User clicks the trade history text
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  selectTradeHistory(
    properties: SelectTradeHistoryProperties,
    options?: EventOptions,
  ) {
    return this.track(new SelectTradeHistory(properties), options);
  }

  /**
   * share referral link
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/share%20referral%20link)
   *
   * User clicks on share your referral now button
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  shareReferralLink(
    options?: EventOptions,
  ) {
    return this.track(new ShareReferralLink(), options);
  }

  /**
   * submit deposit
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/submit%20deposit)
   *
   * User selects a margin account, enters a deposit amount, and clicks deposit
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount)
   * @param options Amplitude event options.
   */
  submitDeposit(
    properties: SubmitDepositProperties,
    options?: EventOptions,
  ) {
    return this.track(new SubmitDeposit(properties), options);
  }

  /**
   * submit margin account transfer
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/submit%20margin%20account%20transfer)
   *
   * User selects two margin accounts to transfer between, enters a transfer amount, and clicks transfer
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount)
   * @param options Amplitude event options.
   */
  submitMarginAccountTransfer(
    properties: SubmitMarginAccountTransferProperties,
    options?: EventOptions,
  ) {
    return this.track(new SubmitMarginAccountTransfer(properties), options);
  }

  /**
   * submit withdrawal
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/submit%20withdrawal)
   *
   * User selects a margin account, enters a withdrawal amount, and clicks withdraw
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. amount)
   * @param options Amplitude event options.
   */
  submitWithdrawal(
    properties: SubmitWithdrawalProperties,
    options?: EventOptions,
  ) {
    return this.track(new SubmitWithdrawal(properties), options);
  }

  /**
   * transfer to margin account
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/transfer%20to%20margin%20account)
   *
   * User clicks the transfer button within the margin to spread ui
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  transferToMarginAccount(
    properties: TransferToMarginAccountProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferToMarginAccount(properties), options);
  }

  /**
   * transfer to spread account
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/transfer%20to%20spread%20account)
   *
   * User clicks the transfer button within the margin to spread ui
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. is_successful)
   * @param options Amplitude event options.
   */
  transferToSpreadAccount(
    properties: TransferToSpreadAccountProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferToSpreadAccount(properties), options);
  }

  /**
   * unfavorite market
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/unfavorite%20market)
   *
   * User clicks the star next to the desired market to unfavorite
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. expiry)
   * @param options Amplitude event options.
   */
  unfavoriteMarket(
    properties: UnfavoriteMarketProperties,
    options?: EventOptions,
  ) {
    return this.track(new UnfavoriteMarket(properties), options);
  }

  /**
   * view account page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20account%20page)
   *
   * User loads the account page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewAccountPage(
    properties: ViewAccountPageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewAccountPage(properties), options);
  }

  /**
   * view consent pane
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20consent%20pane)
   *
   * User loads the consent pane in their browser
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  viewConsentPane(
    options?: EventOptions,
  ) {
    return this.track(new ViewConsentPane(), options);
  }

  /**
   * view landing page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20landing%20page)
   *
   * User loads the landing page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewLandingPage(
    properties: ViewLandingPageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewLandingPage(properties), options);
  }

  /**
   * view leaderboard page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20leaderboard%20page)
   *
   * User loads the leaderboard page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewLeaderboardPage(
    properties: ViewLeaderboardPageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewLeaderboardPage(properties), options);
  }

  /**
   * view onboarding intro pane
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20onboarding%20intro%20pane)
   *
   * User loads the introductory (first) pane in the onboarding flow
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  viewOnboardingIntroPane(
    options?: EventOptions,
  ) {
    return this.track(new ViewOnboardingIntroPane(), options);
  }

  /**
   * view onboarding pre-deposit pane
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20onboarding%20pre-deposit%20pane)
   *
   * User loads the pre-deposit pane in the onboarding flow
   *
   * Owner: Matt M
   *
   * @param options Amplitude event options.
   */
  viewOnboardingPreDepositPane(
    options?: EventOptions,
  ) {
    return this.track(new ViewOnboardingPreDepositPane(), options);
  }

  /**
   * view referrals page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20referrals%20page)
   *
   * User loads the referrals page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewReferralsPage(
    properties: ViewReferralsPageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewReferralsPage(properties), options);
  }

  /**
   * view rewards page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20rewards%20page)
   *
   * User loads the rewards page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewRewardsPage(
    properties: ViewRewardsPageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewRewardsPage(properties), options);
  }

  /**
   * view trade page
   *
   * [View in Tracking Plan](https://data.amplitude.com/sierra-research/Zeta%20DEX/events/main/latest/view%20trade%20page)
   *
   * User loads the dex page in their browser
   *
   * Owner: Matt M
   *
   * @param properties The event's properties (e.g. path)
   * @param options Amplitude event options.
   */
  viewTradePage(
    properties: ViewTradePageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ViewTradePage(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
